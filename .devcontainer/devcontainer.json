// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.217.4/containers/dotnet-postgres
{
    "name": "C# (.NET) and PostgreSQL (Community)",
    "dockerComposeFile": "docker-compose.yml",
    "service": "app",
    "workspaceFolder": "/workspace",
    // Set *default* container specific settings.json values on container create.
    "settings": {
        "csharp.semanticHighlighting.enabled": true,
        "editor.rulers": [ 120 ],
        "editor.semanticHighlighting.enabled": true,
        "editor.wordWrap": "bounded",
        "editor.wordWrapColumn": 120,
        "editor.wrappingIndent": "indent",
        "explorer.experimental.fileNesting.enabled": true,
        "explorer.experimental.fileNesting.patterns": {
            "*.razor": "$(capture).razor.cs",
            "appsettings.json": "appsettings.*.json"
        },
        "files.insertFinalNewline": true,
        "files.trimFinalNewlines": true,
        "files.trimTrailingWhitespace": true,
        "gitlens.currentLine.scrollable": false,
        "gitlens.hovers.currentLine.over": "line",
        "omnisharp.enableRoslynAnalyzers": true,
        "omnisharp.organizeImportsOnFormat": true,
    },
    // Add the IDs of extensions you want installed when the container is created.
    "extensions": [
        "christian-kohler.path-intellisense",
        "eamodio.gitlens",
        "EditorConfig.EditorConfig",
        "Gruntfuggly.todo-tree",
        "hbenl.vscode-test-explorer",
        "humao.rest-client",
        "ms-dotnettools.csharp",
        "ms-dotnettools.vscode-dotnet-runtime",
        "pflannery.vscode-versionlens",
        "streetsidesoftware.code-spell-checker",
    ],
    // Use 'forwardPorts' to make a list of ports inside the container available locally.
    "forwardPorts": [
        5289,
        5290,
        5432,
        7289,
        7290
    ],
    // [Optional] To reuse of your local HTTPS dev cert:
    //
    // 1. Export it locally using this command:
    //    * Windows PowerShell:
    //        dotnet dev-certs https --trust; dotnet dev-certs https -ep "$env:USERPROFILE/.aspnet/https/aspnetapp.pfx" -p "SecurePwdGoesHere"
    //    * macOS/Linux terminal:
    //        dotnet dev-certs https --trust; dotnet dev-certs https -ep "${HOME}/.aspnet/https/aspnetapp.pfx" -p "SecurePwdGoesHere"
    //
    // 2. Uncomment these 'remoteEnv' lines:
    //    "remoteEnv": {
    // 	      "ASPNETCORE_Kestrel__Certificates__Default__Password": "SecurePwdGoesHere",
    //        "ASPNETCORE_Kestrel__Certificates__Default__Path": "/home/vscode/.aspnet/https/aspnetapp.pfx",
    //    },
    //
    // 3. Next, copy your certificate into the container:
    //      1. Start the container
    //      2. Drag ~/.aspnet/https/aspnetapp.pfx into the root of the file explorer
    //      3. Open a terminal in VS Code and run "mkdir -p /home/vscode/.aspnet/https && mv aspnetapp.pfx /home/vscode/.aspnet/https"
    // Use 'postCreateCommand' to run commands after the container is created.
    "postCreateCommand": "dotnet dev-certs https && dotnet tool install --global dotnet-ef && dotnet restore",
    // Comment out to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
    "remoteUser": "vscode",
    "remoteEnv": {
        "PATH": "${containerEnv:PATH}:/home/vscode/.dotnet/tools",
    }
}
