// <auto-generated />
using System;
using BlazorApp1.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlazorApp1.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211116184835_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlazorApp1.Server.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BlazorApp1.Server.Entities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5722cef-ba69-bc92-cb00-57be51f085cd"),
                            Name = "Camille Bailey"
                        },
                        new
                        {
                            Id = new Guid("e35e689b-68ff-9161-9fde-1873da597915"),
                            Name = "Tyree Sanford"
                        },
                        new
                        {
                            Id = new Guid("2dd0636c-ffa2-5eaa-4846-e02d19f79df3"),
                            Name = "Edmond Murray"
                        },
                        new
                        {
                            Id = new Guid("b53e07af-dc0e-e88b-93c3-9b0bde29909b"),
                            Name = "Edward Braun"
                        },
                        new
                        {
                            Id = new Guid("31dd184c-d424-d7a5-aca2-a2994dea04a0"),
                            Name = "Hallie Yost"
                        },
                        new
                        {
                            Id = new Guid("718c32f3-1fe7-4419-a6e1-b19d54f2a83d"),
                            Name = "Clare Waelchi"
                        },
                        new
                        {
                            Id = new Guid("3810c59b-c5c6-087c-e293-e051e42b4700"),
                            Name = "Sadye Schuppe"
                        },
                        new
                        {
                            Id = new Guid("8d46f9c5-f829-4aa4-d9c8-17b00d49269a"),
                            Name = "Nathanael Gusikowski"
                        },
                        new
                        {
                            Id = new Guid("c57940c0-9bec-b9ed-510d-021fe0343a54"),
                            Name = "Alden Bauch"
                        },
                        new
                        {
                            Id = new Guid("53af0e7a-c19a-0916-dcf7-b3fe80c61708"),
                            Name = "Elinor Adams"
                        },
                        new
                        {
                            Id = new Guid("bc8a68b7-2808-9d43-9783-f389932d4b26"),
                            Name = "Jarrod Hermiston"
                        },
                        new
                        {
                            Id = new Guid("17d0f4e7-b1e0-ed23-baad-25b6ee89aab2"),
                            Name = "Cara Wyman"
                        },
                        new
                        {
                            Id = new Guid("38adf40d-b6b1-de2c-b373-71fa98979acc"),
                            Name = "Doris Bergstrom"
                        },
                        new
                        {
                            Id = new Guid("fb9b7812-f0b1-66ea-0291-ba060b9467c6"),
                            Name = "William Lang"
                        },
                        new
                        {
                            Id = new Guid("522d4cbd-1071-1285-85e2-0b819bd9d7d9"),
                            Name = "Roxanne Harris"
                        },
                        new
                        {
                            Id = new Guid("a15222ac-2a13-8617-b461-ad87c6a6f3e1"),
                            Name = "Summer Lowe"
                        },
                        new
                        {
                            Id = new Guid("cb8a8b6d-cab6-a288-4a68-2071284b10dd"),
                            Name = "Reba Boehm"
                        },
                        new
                        {
                            Id = new Guid("c6f9546f-0667-f48b-d382-4b425755ea5f"),
                            Name = "Florence Bednar"
                        },
                        new
                        {
                            Id = new Guid("9f241499-8f31-4208-cde6-e485ac69d982"),
                            Name = "Reinhold Frami"
                        },
                        new
                        {
                            Id = new Guid("541b61c9-7d52-4273-ef1a-6442066cdf11"),
                            Name = "Nola Bogan"
                        },
                        new
                        {
                            Id = new Guid("f8c7e299-5eb5-5e4a-21d0-6cf0aff0aa48"),
                            Name = "Loraine Streich"
                        },
                        new
                        {
                            Id = new Guid("ece41b3e-4b5f-d049-0694-53c0780db331"),
                            Name = "Toy Heller"
                        },
                        new
                        {
                            Id = new Guid("56d45b44-afd0-7049-7232-343d510d36cb"),
                            Name = "Roberta Lowe"
                        },
                        new
                        {
                            Id = new Guid("73b48709-dea4-ca56-65ed-d93876dd2245"),
                            Name = "Vinnie Douglas"
                        },
                        new
                        {
                            Id = new Guid("b197126d-4286-9e8e-263c-8f61835a5c10"),
                            Name = "Donnie Reichert"
                        },
                        new
                        {
                            Id = new Guid("f60a7466-dd8c-804d-4708-ed4cbbb82e57"),
                            Name = "Lenora VonRueden"
                        },
                        new
                        {
                            Id = new Guid("a2b5139e-a125-79af-6bdb-f3afad0fe216"),
                            Name = "Etha Cummings"
                        },
                        new
                        {
                            Id = new Guid("7d78ea43-abfb-b70f-c782-3df920466697"),
                            Name = "Lisette Kohler"
                        },
                        new
                        {
                            Id = new Guid("cb6a0e73-e5e1-1752-1a54-8db6f086a35b"),
                            Name = "Rico Russel"
                        },
                        new
                        {
                            Id = new Guid("3d50fd4f-16fe-4842-7ca2-00ac0a70b9b1"),
                            Name = "Omer Schroeder"
                        },
                        new
                        {
                            Id = new Guid("6f55d415-3a8e-dc62-8a26-7d7d8fc93a02"),
                            Name = "Gay Ratke"
                        },
                        new
                        {
                            Id = new Guid("feb4db06-bab0-22b2-945d-5aaac23f71b1"),
                            Name = "Cordie Morar"
                        },
                        new
                        {
                            Id = new Guid("08cd153e-2f62-7cda-7bb1-7fe011808748"),
                            Name = "Derick Smitham"
                        },
                        new
                        {
                            Id = new Guid("5d0dd41d-bda1-30cb-f028-aa9e57c7275e"),
                            Name = "Elaina Smith"
                        },
                        new
                        {
                            Id = new Guid("f74cc591-70c0-db3d-13ee-32f84f7dd765"),
                            Name = "Audrey Orn"
                        },
                        new
                        {
                            Id = new Guid("b4987ab3-e221-b572-0bcc-5e3daaa5d732"),
                            Name = "Carolina Rath"
                        },
                        new
                        {
                            Id = new Guid("73714cdd-3e4e-cf0f-4e25-7d530595fdea"),
                            Name = "Camila Bradtke"
                        },
                        new
                        {
                            Id = new Guid("33df1e97-b5be-3252-a9b4-e91857337778"),
                            Name = "Bonita Bergnaum"
                        },
                        new
                        {
                            Id = new Guid("90a48a35-ff55-dd56-09f2-27f53d8b04e4"),
                            Name = "Nikita Bechtelar"
                        },
                        new
                        {
                            Id = new Guid("21e1b9bb-16ad-ad59-4099-c213f68f965d"),
                            Name = "Jimmie Reichert"
                        },
                        new
                        {
                            Id = new Guid("53e3be62-c5bc-4e9a-5768-1aa83686a194"),
                            Name = "Kenyatta Fadel"
                        },
                        new
                        {
                            Id = new Guid("889f4120-e9e4-6f49-27c3-2329f11aef6a"),
                            Name = "Jack Mraz"
                        },
                        new
                        {
                            Id = new Guid("52435f4d-1611-b3e3-a1d2-8ef579f02c36"),
                            Name = "Royce McDermott"
                        },
                        new
                        {
                            Id = new Guid("3b0c1ef7-8125-0b6b-0a48-777443bf9cab"),
                            Name = "Rafaela Schinner"
                        },
                        new
                        {
                            Id = new Guid("0697830e-860a-2bf9-d291-7fed75c73c56"),
                            Name = "Roosevelt Howe"
                        },
                        new
                        {
                            Id = new Guid("804b34d3-b814-037c-f33d-7345806f11b2"),
                            Name = "Barbara Hermann"
                        },
                        new
                        {
                            Id = new Guid("617dcf9b-7cfe-cbe9-59f3-23651c620053"),
                            Name = "Jannie Mitchell"
                        },
                        new
                        {
                            Id = new Guid("643debab-83d7-51bf-b7b3-de511ec1228d"),
                            Name = "Alexandre Howe"
                        },
                        new
                        {
                            Id = new Guid("0ffc47db-9309-995f-dbce-b6e7c870cd46"),
                            Name = "Mitchel Becker"
                        },
                        new
                        {
                            Id = new Guid("070ad65c-6822-c33a-47be-9393c03e5104"),
                            Name = "Christina Wolff"
                        },
                        new
                        {
                            Id = new Guid("3ed0d166-69d6-9761-7db5-90ce3ffc0a45"),
                            Name = "Bryce Romaguera"
                        },
                        new
                        {
                            Id = new Guid("35aa5c5f-157b-3c80-6187-06de6bf1deb6"),
                            Name = "Raheem Rice"
                        },
                        new
                        {
                            Id = new Guid("1242e60a-c0ba-70b3-c443-dab5b4043594"),
                            Name = "Lazaro Keebler"
                        },
                        new
                        {
                            Id = new Guid("5e666cd3-6fe2-6176-1262-7f38b966d001"),
                            Name = "Chad Moore"
                        },
                        new
                        {
                            Id = new Guid("8232ed95-51d6-f998-4b5a-7ee632343b01"),
                            Name = "Hilton Tromp"
                        },
                        new
                        {
                            Id = new Guid("c7fff098-f439-1f11-06c4-5778f6a9976f"),
                            Name = "Jada Schmidt"
                        },
                        new
                        {
                            Id = new Guid("d276a01b-00bf-c2a1-dd7b-15f022d5cd7e"),
                            Name = "Joyce Stroman"
                        },
                        new
                        {
                            Id = new Guid("b2851e06-8ade-c968-9dac-14db6834a2c1"),
                            Name = "Camila Gerhold"
                        },
                        new
                        {
                            Id = new Guid("42591922-665d-9fa3-7037-f10091a3a85f"),
                            Name = "Dandre Koepp"
                        },
                        new
                        {
                            Id = new Guid("5369a4ab-00a6-9179-4603-6c293a98e27c"),
                            Name = "Carmelo Rolfson"
                        },
                        new
                        {
                            Id = new Guid("d415b398-5a98-e4c9-091a-40d049d2ca3d"),
                            Name = "Elda Huel"
                        },
                        new
                        {
                            Id = new Guid("4e163b9a-e2b5-dfba-d694-9fa8a887296a"),
                            Name = "Adele Block"
                        },
                        new
                        {
                            Id = new Guid("d1afe6c9-af2a-28b6-a906-353e528d9a57"),
                            Name = "Howard Hermann"
                        },
                        new
                        {
                            Id = new Guid("25c7b04c-4d02-4511-6902-e6f3f1b27293"),
                            Name = "Nadia Hilll"
                        },
                        new
                        {
                            Id = new Guid("2948cabe-23e7-d644-840a-1ccfdac4425f"),
                            Name = "Tamara Robel"
                        },
                        new
                        {
                            Id = new Guid("caca4043-f3a5-849d-13be-ecd1229801db"),
                            Name = "Aiden Fisher"
                        },
                        new
                        {
                            Id = new Guid("a98b80be-7f74-9562-5944-788049c88bf6"),
                            Name = "Mariam Bosco"
                        },
                        new
                        {
                            Id = new Guid("9c04b7ae-00fd-69d1-42c8-feca6582474d"),
                            Name = "Mac Adams"
                        },
                        new
                        {
                            Id = new Guid("9577c69b-9a07-0868-820f-f7e50a5afa49"),
                            Name = "Esteban Daugherty"
                        },
                        new
                        {
                            Id = new Guid("4d5db2d8-71c0-654d-236f-484f2795021f"),
                            Name = "Laney Kozey"
                        },
                        new
                        {
                            Id = new Guid("50897c5b-72b0-8897-a43f-79418fa66621"),
                            Name = "Josephine Lang"
                        },
                        new
                        {
                            Id = new Guid("b787dbb8-852b-ad53-e80f-dff87fe93172"),
                            Name = "Carrie Heidenreich"
                        },
                        new
                        {
                            Id = new Guid("6d5ba154-4cb7-eb99-b8fa-26a4c7326686"),
                            Name = "Keagan Lebsack"
                        },
                        new
                        {
                            Id = new Guid("713276c1-9454-09fe-ed14-926874f23317"),
                            Name = "Conner Hilpert"
                        },
                        new
                        {
                            Id = new Guid("3ed4d4a5-c451-f3f9-2f41-b0ba9037c7be"),
                            Name = "Quinten Stehr"
                        },
                        new
                        {
                            Id = new Guid("66470b57-f42a-425b-a110-d4a0867e78d3"),
                            Name = "Jarod Schuppe"
                        },
                        new
                        {
                            Id = new Guid("42edf63d-ec92-0ac9-9c26-287d8aac06ff"),
                            Name = "Dorcas Walker"
                        },
                        new
                        {
                            Id = new Guid("dd3e5e43-0b1e-925f-3417-3c908054d9cd"),
                            Name = "Gustave Fritsch"
                        },
                        new
                        {
                            Id = new Guid("18a870d2-2e3b-cfc1-0382-8a580fe2f277"),
                            Name = "Vena Cronin"
                        },
                        new
                        {
                            Id = new Guid("1144d8c5-420e-48a8-31b4-d8e51f567995"),
                            Name = "Kelsie Grimes"
                        },
                        new
                        {
                            Id = new Guid("fa3f0f78-c566-d7c7-581f-1ca548dda970"),
                            Name = "Coralie Moore"
                        },
                        new
                        {
                            Id = new Guid("3989a325-3e34-1071-e12e-336fe01dc478"),
                            Name = "Duncan Ebert"
                        },
                        new
                        {
                            Id = new Guid("a5ff7238-9817-f0e5-11ab-fcb5bf0df8ef"),
                            Name = "Austyn Rohan"
                        },
                        new
                        {
                            Id = new Guid("f17e7d69-9913-c5e1-e84e-796e0f7c565b"),
                            Name = "Jordy Bins"
                        },
                        new
                        {
                            Id = new Guid("284490d6-6c5a-593c-1621-327c74186039"),
                            Name = "Suzanne Bins"
                        },
                        new
                        {
                            Id = new Guid("12851ba4-00de-8cbb-c584-e0dd897baae9"),
                            Name = "Lindsey Johns"
                        },
                        new
                        {
                            Id = new Guid("b8b6fb89-083d-895a-2264-691ac59c1675"),
                            Name = "Melyna Jacobs"
                        },
                        new
                        {
                            Id = new Guid("4829f5d4-6f59-458b-5bc6-121103b6b712"),
                            Name = "Wilma McKenzie"
                        },
                        new
                        {
                            Id = new Guid("8cb8a6af-35f9-d366-cb71-d3ac1f388e50"),
                            Name = "Leatha Toy"
                        },
                        new
                        {
                            Id = new Guid("8fd16a2b-acec-174b-0b1f-cf026a5a7844"),
                            Name = "Geovany VonRueden"
                        },
                        new
                        {
                            Id = new Guid("f394d1d5-9fa2-562f-5d54-b52c919544ea"),
                            Name = "Natalie Mayert"
                        },
                        new
                        {
                            Id = new Guid("04a27a19-1eda-cf2b-952d-65d4a719997a"),
                            Name = "Mafalda Bode"
                        },
                        new
                        {
                            Id = new Guid("04128d58-8b66-36e5-32ba-f3385d6e8fd1"),
                            Name = "Felicia Crist"
                        },
                        new
                        {
                            Id = new Guid("5baf84b7-1c45-5ebf-7f1d-75347874f2be"),
                            Name = "Kraig Bergstrom"
                        },
                        new
                        {
                            Id = new Guid("586e6e54-1cfa-603a-be42-6c2cacbae9ea"),
                            Name = "Gerda Bode"
                        },
                        new
                        {
                            Id = new Guid("8c19d376-ed4a-1066-7489-cff2a1fcd96d"),
                            Name = "Ardith Upton"
                        },
                        new
                        {
                            Id = new Guid("f359910d-0d56-a756-7587-6c7932af46f5"),
                            Name = "Susanna Kuphal"
                        },
                        new
                        {
                            Id = new Guid("154fe414-ff38-34b1-0f24-ced86943d893"),
                            Name = "Nasir Lehner"
                        },
                        new
                        {
                            Id = new Guid("9cf662e3-8fde-10aa-2dd8-806ef37e8401"),
                            Name = "Velva Mosciski"
                        },
                        new
                        {
                            Id = new Guid("331efd3a-84f4-af30-1666-9a30f7d35f27"),
                            Name = "Oda Bednar"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "59d50e89-c579-4cc4-9cd1-a8db1399fe4e",
                            ClientId = "blazor-client",
                            ConcurrencyToken = "75c09b06-4950-4ff4-afda-da1b17762cab",
                            ConsentType = "explicit",
                            DisplayName = "Blazor client application",
                            Permissions = "[\"ept:authorization\",\"ept:logout\",\"ept:token\",\"gt:authorization_code\",\"gt:refresh_token\",\"rst:code\",\"scp:email\",\"scp:profile\",\"scp:roles\"]",
                            PostLogoutRedirectUris = "[\"https://localhost:7290/authentication/logout-callback\"]",
                            RedirectUris = "[\"https://localhost:7290/authentication/login-callback\"]",
                            Requirements = "[\"ft:pkce\"]",
                            Type = "public"
                        },
                        new
                        {
                            Id = "5cf57099-7162-425c-b2cd-11d7c02610d5",
                            ClientId = "swagger-client",
                            ConcurrencyToken = "6ddd4624-33c5-45e1-b47e-cf3ec42d3ab8",
                            ConsentType = "explicit",
                            DisplayName = "Swagger client application",
                            Permissions = "[\"ept:authorization\",\"ept:logout\",\"ept:token\",\"gt:authorization_code\",\"gt:refresh_token\",\"rst:code\",\"scp:email\",\"scp:profile\",\"scp:roles\"]",
                            RedirectUris = "[\"https://localhost:7289/swagger/oauth2-redirect.html\"]",
                            Requirements = "[\"ft:pkce\"]",
                            Type = "public"
                        },
                        new
                        {
                            Id = "d2557a9b-404d-42ab-89ab-7019929e96a4",
                            ClientId = "postman-client",
                            ConcurrencyToken = "31d63ffc-8677-4b24-8815-2e423014c1c1",
                            ConsentType = "explicit",
                            DisplayName = "Postman client application",
                            Permissions = "[\"ept:authorization\",\"ept:logout\",\"ept:token\",\"gt:authorization_code\",\"gt:refresh_token\",\"rst:code\",\"scp:email\",\"scp:profile\",\"scp:roles\"]",
                            RedirectUris = "[\"https://oauth.pstmn.io/v1/callback\"]",
                            Requirements = "[\"ft:pkce\"]",
                            Type = "public"
                        });
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlazorApp1.Server.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlazorApp1.Server.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorApp1.Server.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlazorApp1.Server.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
